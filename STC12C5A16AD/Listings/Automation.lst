C51 COMPILER V9.60.0.0   AUTOMATION                                                        03/07/2022 13:33:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE AUTOMATION
OBJECT MODULE PLACED IN .\Objects\Automation.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE Automation.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\STC12C5A16AD) DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\Automation.lst) TABS(2) OBJECT(.\Objects\Automation.obj)

line level    source

   1          #include "automation.h"
   2          
   3          void Music(uchar num) //Êí≠ÊîæÈü≥‰πê
   4          {
   5   1          uchar idata Music_Selection[10] = {0x7e, 0xff, 0x06, 0x12, 0x00, 0x00, 0x01, 0xfe, 0xf7, 0xef}; //ÈÄâÊ
             -ã©Êí≠Âèë MP3Êñá‰ª∂Â§π
   6   1          Music_Selection[6] = num;
   7   1          Music_Selection[7] = ((0xffff - (Music_Selection[1] + Music_Selection[2] + Music_Selection[3] + Music_
             -Selection[4] + Music_Selection[5] + Music_Selection[6]) + 1) >> 8);
   8   1          Music_Selection[8] = ((0xffff - (Music_Selection[1] + Music_Selection[2] + Music_Selection[3] + Music_
             -Selection[4] + Music_Selection[5] + Music_Selection[6]) + 1) & 0xff);
   9   1          UART_MN(Music_Selection, 10);
  10   1      }
  11          
  12          uchar *M_ROM(uchar n) //Ëé∑ÂèñÁ®ãÂ∫èÊÆµ
  13          {
  14   1          uchar idata M_Rom[19], num1, num2;
  15   1          if (P_RomFlag)
  16   1          {
  17   2              for (num1 = 0; num1 < 19; num1++)
  18   2              {
  19   3                  M_Rom[num1] = P_Rom[num1];
  20   3              }
  21   2          }
  22   1          else
  23   1          {
  24   2              F_Step = IapReaduchar(0x20E2 + F_ROM_Set - 1);
  25   2              switch (F_ROM_Set)
  26   2              {
  27   3              case 1:
  28   3                  M_Rom[16] = IapReaduchar(9 * (n - 1) + 0x2100);
  29   3                  M_Rom[17] = IapReaduchar(9 * (n - 1) + 0x2100 + 1);
  30   3                  M_Rom[18] = IapReaduchar(9 * (n - 1) + 0x2100 + 2);
  31   3                  for (num1 = 0, num2 = 1; num1 < 8; num1++, num2 *= 2)
  32   3                  {
  33   4                      M_Rom[num1] = (M_Rom[16] & num2) / num2 + (M_Rom[17] & num2) / num2 * 2 + (M_Rom[18] & num
             -2) / num2 * 3;
  34   4                  }
  35   3                  M_Rom[16] = IapReaduchar(9 * (n - 1) + 0x2100 + 3);
  36   3                  M_Rom[17] = IapReaduchar(9 * (n - 1) + 0x2100 + 4);
  37   3                  M_Rom[18] = IapReaduchar(9 * (n - 1) + 0x2100 + 5);
  38   3                  for (num1 = 8, num2 = 1; num1 < 16; num1++, num2 *= 2)
  39   3                  {
  40   4                      M_Rom[num1] = (M_Rom[16] & num2) / num2 + (M_Rom[17] & num2) / num2 * 2 + (M_Rom[18] & num
             -2) / num2 * 3;
  41   4                  }
  42   3      
  43   3                  M_Rom[16] = IapReaduchar(9 * (n - 1) + 0x2100 + 6);
  44   3                  M_Rom[17] = IapReaduchar(9 * (n - 1) + 0x2100 + 7);
  45   3                  M_Rom[18] = IapReaduchar(9 * (n - 1) + 0x2100 + 8);
  46   3                  break;
  47   3              case 2:
  48   3                  M_Rom[16] = IapReaduchar(9 * (n - 1) + 0x2755);
  49   3                  M_Rom[17] = IapReaduchar(9 * (n - 1) + 0x2755 + 1);
C51 COMPILER V9.60.0.0   AUTOMATION                                                        03/07/2022 13:33:44 PAGE 2   

  50   3                  M_Rom[18] = IapReaduchar(9 * (n - 1) + 0x2755 + 2);
  51   3                  for (num1 = 0, num2 = 1; num1 < 8; num1++, num2 *= 2)
  52   3                  {
  53   4                      M_Rom[num1] = (M_Rom[16] & num2) / num2 + (M_Rom[17] & num2) / num2 * 2 + (M_Rom[18] & num
             -2) / num2 * 3;
  54   4                  }
  55   3                  M_Rom[16] = IapReaduchar(9 * (n - 1) + 0x2755 + 3);
  56   3                  M_Rom[17] = IapReaduchar(9 * (n - 1) + 0x2755 + 4);
  57   3                  M_Rom[18] = IapReaduchar(9 * (n - 1) + 0x2755 + 5);
  58   3                  for (num1 = 8, num2 = 1; num1 < 16; num1++, num2 *= 2)
  59   3                  {
  60   4                      M_Rom[num1] = (M_Rom[16] & num2) / num2 + (M_Rom[17] & num2) / num2 * 2 + (M_Rom[18] & num
             -2) / num2 * 3;
  61   4                  }
  62   3                  M_Rom[16] = IapReaduchar(9 * (n - 1) + 0x2755 + 6);
  63   3                  M_Rom[17] = IapReaduchar(9 * (n - 1) + 0x2755 + 7);
  64   3                  M_Rom[18] = IapReaduchar(9 * (n - 1) + 0x2755 + 8);
  65   3                  break;
  66   3              case 3:
  67   3                  M_Rom[16] = IapReaduchar(9 * (n - 1) + 0x2DAA);
  68   3                  M_Rom[17] = IapReaduchar(9 * (n - 1) + 0x2DAA + 1);
  69   3                  M_Rom[18] = IapReaduchar(9 * (n - 1) + 0x2DAA + 2);
  70   3                  for (num1 = 0, num2 = 1; num1 < 8; num1++, num2 *= 2)
  71   3                  {
  72   4                      M_Rom[num1] = (M_Rom[16] & num2) / num2 + (M_Rom[17] & num2) / num2 * 2 + (M_Rom[18] & num
             -2) / num2 * 3;
  73   4                  }
  74   3                  M_Rom[16] = IapReaduchar(9 * (n - 1) + 0x2DAA + 3);
  75   3                  M_Rom[17] = IapReaduchar(9 * (n - 1) + 0x2DAA + 4);
  76   3                  M_Rom[18] = IapReaduchar(9 * (n - 1) + 0x2DAA + 5);
  77   3                  for (num1 = 8, num2 = 1; num1 < 16; num1++, num2 *= 2)
  78   3                  {
  79   4                      M_Rom[num1] = (M_Rom[16] & num2) / num2 + (M_Rom[17] & num2) / num2 * 2 + (M_Rom[18] & num
             -2) / num2 * 3;
  80   4                  }
  81   3                  M_Rom[16] = IapReaduchar(9 * (n - 1) + 0x2DAA + 6);
  82   3                  M_Rom[17] = IapReaduchar(9 * (n - 1) + 0x2DAA + 7);
  83   3                  M_Rom[18] = IapReaduchar(9 * (n - 1) + 0x2DAA + 8);
  84   3                  break;
  85   3              }
  86   2          }
  87   1          return M_Rom;
  88   1      }
  89          
  90          void ProgramRun() //ËøêË°åÁ®ãÂ∫è
  91          {
  92   1          if (P_Run)
  93   1          {
  94   2              uchar *M_Rom, num1;
  95   2              M_Rom = M_ROM(P_Step);
  96   2              for (num1 = 0; num1 < 16; num1++)
  97   2              {
  98   3                  if (*(M_Rom + num1) == 0)
  99   3                  {
 100   4                      F_Motor[num1] = 0;
 101   4                  }
 102   3                  else if (*(M_Rom + num1) == 1)
 103   3                  {
 104   4                      F_Motor[num1] = 1;
 105   4                  }
 106   3                  else if (*(M_Rom + num1) == 2)
 107   3                  {
C51 COMPILER V9.60.0.0   AUTOMATION                                                        03/07/2022 13:33:44 PAGE 3   

 108   4                      DW_Flag[num1] = 1;
 109   4                  }
 110   3                  else if (*(M_Rom + num1) == 3)
 111   3                  {
 112   4                      DW_Flag[num1] = 2;
 113   4                  }
 114   3              }
 115   2              if (*(M_Rom + 16) > 0)
 116   2              {
 117   3                  Music(*(M_Rom + 16));
 118   3              }
 119   2              // Test_Send(*(M_Rom + 17));
 120   2              // Test_Send(*(M_Rom + 18));
 121   2              WaitTime = *(M_Rom + 17) * 256 + *(M_Rom + 18);
 122   2              if (WaitTime > 0)
 123   2                  WaitTime = WaitTime * 1000;
 124   2              P_Run = 0;
 125   2          }
 126   1          else
 127   1          {
 128   2              if (WaitTime == 0)
 129   2              {
 130   3                  P_Step++;
 131   3                  P_Run = 1;
 132   3                  if (P_Step > F_Step)
 133   3                  {
 134   4                      P_Step = 1;
 135   4                      F_Run = 0;
 136   4                  }
 137   3              }
 138   2          }
 139   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1716    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----      31
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
